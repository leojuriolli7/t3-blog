// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Like {
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId  String
  postId  String
  dislike Boolean @default(false)

  @@id([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model FavoritesOnUsers {
  userId String
  postId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@index([postId])
  @@index([userId])
}

model UserLink {
  id        String  @id @default(uuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  icon      String
  title     String
  publisher String?
  url       String

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  bio       String?            @db.VarChar(160)
  likes     Like[]
  votes     PollOption[]
  favorites FavoritesOnUsers[]
  followers Follows[]          @relation("following")
  following Follows[]          @relation("follower")
  url       UserLink?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Post      Post[]
  Comment   Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tag {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[]

  @@fulltext([name])
}

model PollOption {
  id     String       @id @default(uuid())
  title  String
  color  String
  postId String
  pollId String
  poll   Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)
  voters User[]  

  @@index([pollId])
}



model Poll {
  id      String       @id @default(uuid())
  postId  String       @unique
  options PollOption[]
  title   String
  post    Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Post {
  id          String             @id @default(uuid())
  title       String
  body        String             @db.Text
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  user        User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?
  link        Link?
  poll        Poll?
  favoritedBy FavoritesOnUsers[]

  tags Tag[]

  attachments Attachment[]
  likes       Like[]
  Comment     Comment[]

  @@index([userId])
  @@fulltext([body])
  @@fulltext([title])
  @@fulltext([body, title])
}

model Link {
  id          String  @id @default(uuid())
  postId      String  @unique
  image       String
  title       String
  url         String
  description String  @db.Text
  publisher   String?
  post        Post    @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model Attachment {
  id     String @id @default(cuid())
  name   String @default("Uploaded file")
  type   String @default("unknown")
  postId String
  url    String @default("")
  label    String? @db.VarChar(160)

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model Comment {
  id   String @unique @default(uuid())
  body String @db.Text

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  Post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String?

  children Comment[] @relation("comment_children")
  parent   Comment?  @relation("comment_children", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([parentId])
  @@index([postId])
}
